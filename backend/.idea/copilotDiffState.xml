<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Daily Updates API&#10;&#10;This document explains how to call the API endpoints for the daily updates application. The server runs on `http://localhost:8090`.&#10;&#10;## API Endpoints&#10;&#10;You can use a command-line tool like `curl` or an API client like Postman to interact with the endpoints.&#10;&#10;### 1. Create an Update&#10;&#10;To create a new update, send a `POST` request to `/api/updates` with the update details in the JSON body.&#10;&#10;- **Method**: `POST`&#10;- **URL**: `http://localhost:8090/api/updates`&#10;- **Headers**: `Content-Type: application/json`&#10;&#10;**Example `curl` command:**&#10;&#10;```bash&#10;curl -X POST http://localhost:8090/api/updates \&#10;-H &quot;Content-Type: application/json&quot; \&#10;-d '{&#10;    &quot;title&quot;: &quot;EOD Report&quot;,&#10;    &quot;description&quot;: &quot;Finished feature-abc and started on feature-xyz.&quot;,&#10;    &quot;status&quot;: &quot;IN_PROGRESS&quot;,&#10;    &quot;priority&quot;: &quot;MEDIUM&quot;,&#10;    &quot;subtasks&quot;: [&#10;        {&#10;            &quot;title&quot;: &quot;Complete feature-abc&quot;,&#10;            &quot;status&quot;: &quot;COMPLETED&quot;,&#10;            &quot;output&quot;: &quot;Pull request raised and approved.&quot;,&#10;            &quot;completedAt&quot;: &quot;2023-10-27T16:30:00&quot;&#10;        },&#10;        {&#10;            &quot;title&quot;: &quot;Begin feature-xyz&quot;,&#10;            &quot;status&quot;: &quot;STARTED&quot;,&#10;            &quot;output&quot;: &quot;Initial project setup is done.&quot;&#10;        }&#10;    ]&#10;}'&#10;```&#10;&#10;The API will respond with the newly created update object, including its generated `id` and `createdAt` timestamp.&#10;&#10;### 2. Get All Updates&#10;&#10;To retrieve a list of all updates, send a `GET` request to `/api/updates`.&#10;&#10;- **Method**: `GET`&#10;- **URL**: `http://localhost:8090/api/updates`&#10;&#10;**Example `curl` command:**&#10;&#10;```bash&#10;curl -X GET http://localhost:8090/api/updates&#10;```&#10;&#10;### 3. Get a Specific Update by ID&#10;&#10;To get a single update by its unique ID, send a `GET` request to `/api/updates/{id}`, replacing `{id}` with the actual ID of the update.&#10;&#10;- **Method**: `GET`&#10;- **URL**: `http://localhost:8090/api/updates/{id}`&#10;&#10;**Example `curl` command (to get the update with ID 1):**&#10;&#10;```bash&#10;curl -X GET http://localhost:8090/api/updates/1&#10;```&#10;&#10;" />
              <option name="updatedContent" value="# Daily Updates API&#10;&#10;This document explains how to call the API endpoints for the daily updates application. The server runs on `http://localhost:8090`.&#10;&#10;## API Endpoints&#10;&#10;You can use a command-line tool like `curl` or an API client like Postman to interact with the endpoints.&#10;&#10;### 1. Create an Update&#10;&#10;To create a new update, send a `POST` request to `/api/updates` with the update details in the JSON body.&#10;&#10;- **Method**: `POST`&#10;- **URL**: `http://localhost:8090/api/updates`&#10;- **Headers**: `Content-Type: application/json`&#10;&#10;**Example `curl` command:**&#10;&#10;```bash&#10;curl -X POST http://localhost:8090/api/updates \&#10;-H &quot;Content-Type: application/json&quot; \&#10;-d '{&#10;    &quot;title&quot;: &quot;EOD Report&quot;,&#10;    &quot;description&quot;: &quot;Finished feature-abc and started on feature-xyz.&quot;,&#10;    &quot;status&quot;: &quot;IN_PROGRESS&quot;,&#10;    &quot;priority&quot;: &quot;MEDIUM&quot;,&#10;    &quot;subtasks&quot;: [&#10;        {&#10;            &quot;title&quot;: &quot;Complete feature-abc&quot;,&#10;            &quot;status&quot;: &quot;COMPLETED&quot;,&#10;            &quot;output&quot;: &quot;Pull request raised and approved.&quot;,&#10;            &quot;completedAt&quot;: &quot;2023-10-27T16:30:00&quot;&#10;        },&#10;        {&#10;            &quot;title&quot;: &quot;Begin feature-xyz&quot;,&#10;            &quot;status&quot;: &quot;STARTED&quot;,&#10;            &quot;output&quot;: &quot;Initial project setup is done.&quot;&#10;        }&#10;    ]&#10;}'&#10;```&#10;&#10;The API will respond with the newly created update object, including its generated `id` and `createdAt` timestamp.&#10;&#10;### 2. Get All Updates&#10;&#10;To retrieve a list of all updates, send a `GET` request to `/api/updates`.&#10;&#10;- **Method**: `GET`&#10;- **URL**: `http://localhost:8090/api/updates`&#10;&#10;**Example `curl` command:**&#10;&#10;```bash&#10;curl -X GET http://localhost:8090/api/updates&#10;```&#10;&#10;### 3. Get a Specific Update by ID&#10;&#10;To get a single update by its unique ID, send a `GET` request to `/api/updates/{id}`, replacing `{id}` with the actual ID of the update.&#10;&#10;- **Method**: `GET`&#10;- **URL**: `http://localhost:8090/api/updates/{id}`&#10;&#10;**Example `curl` command (to get the update with ID 1):**&#10;&#10;```bash&#10;curl -X GET http://localhost:8090/api/updates/1&#10;```&#10;&#10;### 4. Delete an Update&#10;&#10;To delete an update by its unique ID, send a `DELETE` request to `/api/updates/{id}`.&#10;&#10;- **Method**: `DELETE`&#10;- **URL**: `http://localhost:8090/api/updates/{id}`&#10;&#10;**Example `curl` command (to delete the update with ID 1):**&#10;&#10;```bash&#10;curl -X DELETE http://localhost:8090/api/updates/1&#10;```&#10;&#10;If the deletion is successful, the API will respond with a `204 No Content` status." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;&#9;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#9;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#9;&lt;parent&gt;&#10;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;&#9;&#9;&lt;version&gt;3.1.2&lt;/version&gt;&#10;&#9;&#9;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;&#9;&lt;/parent&gt;&#10;&#9;&lt;groupId&gt;com.example&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;updates&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&lt;name&gt;updates&lt;/name&gt;&#10;&#9;&lt;description&gt;Daily Updates Backend Application&lt;/description&gt;&#10;&#9;&lt;properties&gt;&#10;&#9;&#9;&lt;java.version&gt;17&lt;/java.version&gt;&#10;&#9;&lt;/properties&gt;&#10;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&lt;/dependencies&gt;&#10;&#10;&#9;&lt;build&gt;&#10;&#9;&#9;&lt;plugins&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&lt;/plugins&gt;&#10;&#9;&lt;/build&gt;&#10;&#10;&lt;/project&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/updates/Application.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/updates/Application.java" />
              <option name="originalContent" value="package com.example.updates;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class Application {&#10;&#10;&#9;public static void main(String[] args) {&#10;&#9;&#9;SpringApplication.run(Application.class, args);&#10;&#9;}&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.updates;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class Application {&#10;&#10;&#9;public static void main(String[] args) {&#10;&#9;&#9;SpringApplication.run(Application.class, args);&#10;&#9;}&#10;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/updates/controller/UpdateController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/updates/controller/UpdateController.java" />
              <option name="originalContent" value="package com.example.updates.controller;&#10;&#10;import com.example.updates.model.Update;&#10;import com.example.updates.service.UpdateService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/updates&quot;)&#10;public class UpdateController {&#10;&#10;    @Autowired&#10;    private UpdateService updateService;&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Update&gt; createUpdate(@RequestBody Update update) {&#10;        return ResponseEntity.ok(updateService.createUpdate(update));&#10;    }&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;Update&gt;&gt; getAllUpdates() {&#10;        return ResponseEntity.ok(updateService.getAllUpdates());&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Update&gt; getUpdate(@PathVariable Long id) {&#10;        Update update = updateService.getUpdate(id);&#10;        if (update != null) {&#10;            return ResponseEntity.ok(update);&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.updates.controller;&#10;&#10;import com.example.updates.model.Update;&#10;import com.example.updates.service.UpdateService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/updates&quot;)&#10;public class UpdateController {&#10;&#10;    @Autowired&#10;    private UpdateService updateService;&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Update&gt; createUpdate(@RequestBody Update update) {&#10;        return ResponseEntity.ok(updateService.createUpdate(update));&#10;    }&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;Update&gt;&gt; getAllUpdates() {&#10;        return ResponseEntity.ok(updateService.getAllUpdates());&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Update&gt; getUpdate(@PathVariable Long id) {&#10;        Update update = updateService.getUpdate(id);&#10;        if (update != null) {&#10;            return ResponseEntity.ok(update);&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deleteUpdate(@PathVariable Long id) {&#10;        boolean deleted = updateService.deleteUpdate(id);&#10;        if (deleted) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/updates/model/SubTask.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/updates/model/SubTask.java" />
              <option name="updatedContent" value="package com.example.updates.model;&#10;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.GeneratedValue;&#10;import jakarta.persistence.GenerationType;&#10;import jakarta.persistence.Id;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;public class SubTask {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    private String title;&#10;    private String status;&#10;    private String output;&#10;    private LocalDateTime completedAt;&#10;&#10;    // Getters and Setters&#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    public String getTitle() { return title; }&#10;    public void setTitle(String title) { this.title = title; }&#10;    public String getStatus() { return status; }&#10;    public void setStatus(String status) { this.status = status; }&#10;    public String getOutput() { return output; }&#10;    public void setOutput(String output) { this.output = output; }&#10;    public LocalDateTime getCompletedAt() { return completedAt; }&#10;    public void setCompletedAt(LocalDateTime completedAt) { this.completedAt = completedAt; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/updates/model/Update.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/updates/model/Update.java" />
              <option name="updatedContent" value="package com.example.updates.model;&#10;&#10;import jakarta.persistence.*;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;updates&quot;)&#10;public class Update {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    private String title;&#10;    private String description;&#10;    private String status;&#10;    private String priority;&#10;    private LocalDateTime createdAt;&#10;&#10;    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)&#10;    @JoinColumn(name = &quot;update_id&quot;)&#10;    private List&lt;SubTask&gt; subtasks;&#10;&#10;    // Getters and Setters&#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    public String getTitle() { return title; }&#10;    public void setTitle(String title) { this.title = title; }&#10;    public String getDescription() { return description; }&#10;    public void setDescription(String description) { this.description = description; }&#10;    public String getStatus() { return status; }&#10;    public void setStatus(String status) { this.status = status; }&#10;    public String getPriority() { return priority; }&#10;    public void setPriority(String priority) { this.priority = priority; }&#10;    public LocalDateTime getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }&#10;    public List&lt;SubTask&gt; getSubtasks() { return subtasks; }&#10;    public void setSubtasks(List&lt;SubTask&gt; subtasks) { this.subtasks = subtasks; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/updates/repository/UpdateRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/updates/repository/UpdateRepository.java" />
              <option name="updatedContent" value="package com.example.updates.repository;&#10;&#10;import com.example.updates.model.Update;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface UpdateRepository extends JpaRepository&lt;Update, Long&gt; {&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/updates/service/UpdateService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/updates/service/UpdateService.java" />
              <option name="originalContent" value="package com.example.updates.service;&#10;&#10;import com.example.updates.model.Update;&#10;import com.example.updates.repository.UpdateRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Service&#10;public class UpdateService {&#10;&#10;    @Autowired&#10;    private UpdateRepository updateRepository;&#10;&#10;    public Update createUpdate(Update update) {&#10;        update.setCreatedAt(LocalDateTime.now());&#10;        return updateRepository.save(update);&#10;    }&#10;&#10;    public List&lt;Update&gt; getAllUpdates() {&#10;        return updateRepository.findAll();&#10;    }&#10;&#10;    public Update getUpdate(Long id) {&#10;        return updateRepository.findById(id).orElse(null);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.updates.service;&#10;&#10;import com.example.updates.model.Update;&#10;import com.example.updates.repository.UpdateRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;@Service&#10;public class UpdateService {&#10;&#10;    @Autowired&#10;    private UpdateRepository updateRepository;&#10;&#10;    public Update createUpdate(Update update) {&#10;        update.setCreatedAt(LocalDateTime.now());&#10;        return updateRepository.save(update);&#10;    }&#10;&#10;    public List&lt;Update&gt; getAllUpdates() {&#10;        return updateRepository.findAll();&#10;    }&#10;&#10;    public Update getUpdate(Long id) {&#10;        return updateRepository.findById(id).orElse(null);&#10;    }&#10;&#10;    public boolean deleteUpdate(Long id) {&#10;        if (updateRepository.existsById(id)) {&#10;            updateRepository.deleteById(id);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.datasource.url=jdbc:h2:mem:updatesdb&#10;spring.datasource.driverClassName=org.h2.Driver&#10;spring.datasource.username=sa&#10;spring.datasource.password=&#10;spring.jpa.database-platform=org.hibernate.dialect.H2Dialect&#10;spring.h2.console.enabled=true&#10;spring.jpa.hibernate.ddl-auto=update&#10;&#10;" />
              <option name="updatedContent" value="spring.datasource.url=jdbc:h2:mem:updatesdb&#10;spring.datasource.driverClassName=org.h2.Driver&#10;spring.datasource.username=sa&#10;spring.datasource.password=&#10;spring.jpa.database-platform=org.hibernate.dialect.H2Dialect&#10;spring.h2.console.enabled=true&#10;spring.jpa.hibernate.ddl-auto=update&#10;server.port=8090" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>